#!/usr/bin/ruby
require 'optparse'
require 'sqlite3'

USAGE = <<EOS.freeze
usage: turnip [--help] <command> [<args>]

Log when you work during the day.

Commands:
  start   start the clock
  stop    stop the clock
  show    display all saved intervals
  clear   delete all saved intervals

'turnip <command> --help' to see how to use a command
EOS

DB_DIR = '.turnip'.freeze
DB_FILE = 'intervals.db'.freeze
DATE_DB_FORMAT = '%Y%m%d'.freeze
DATE_PRINT_FORMAT = '%b %d, %Y'.freeze
TIME_DB_FORMAT = '%H:%M'.freeze
TIME_PRINT_FORMAT = '%I:%M %p'.freeze
SECS_IN_HOUR = 60 * 60

# Helpers

def format_db_date(db_date_str)
  return '' if db_date_str.nil?
  Date.strptime(db_date_str, DATE_DB_FORMAT).strftime(DATE_PRINT_FORMAT)
end

def format_db_time(db_time_str)
  return '' if db_time_str.nil?
  Time.strptime(db_time_str, TIME_DB_FORMAT).strftime(TIME_PRINT_FORMAT)
end

def get_hours_worked(start_time, end_time)
  return (end_time - start_time) / SECS_IN_HOUR
end

def show_usage
  puts USAGE
end

def detect_unrecognized_args(parser)
  unless ARGV.empty?
    parser.abort "error: unrecognized args: #{ARGV.join(' ')}"
  end
end

# still show some usage text for commands without args
def no_args_command(command, description)
  parser = OptionParser.new do |opts|
    opts.banner = "usage: turnip #{command} [--help]"
    opts.separator description
    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
      exit
    end
  end
  parser.parse!
  detect_unrecognized_args(parser)
end

def get_last_row(db, &block)
  db.execute(<<-SQL, &block)
    select * from intervals
    order by rowid desc
    limit 1;
  SQL
end

def setup_db
  Dir.chdir(ENV['HOME'])
  Dir.mkdir(DB_DIR) unless File::exists?(DB_DIR)
  Dir.chdir(DB_DIR)
  db_exists = File::exists?(DB_FILE)
  db = SQLite3::Database.new DB_FILE

  if db_exists
    get_last_row(db) do |last_interval|
      date = last_interval.shift
      if last_interval.last.nil? &&
          date.to_s != Time.now.strftime(DATE_DB_FORMAT)

        STDERR.puts 'warning: Punched in at ' \
          "#{format_db_date(date)}, #{format_db_time(last_interval.first)}" \
          ', but never punched out. Deleting incomplete interval.'

        db.execute <<-SQL
          delete from intervals
          order by rowid desc
          limit 1;
        SQL
      end
    end
  else
    db.execute <<-SQL
      create table intervals (
        date  date,
        start time,
        end   time
      );
    SQL
  end

  db
end

# Commands

def punch_in(db)
  no_args_command('start', 'Start the clock for your session')

  get_last_row(db) do |last_interval|
    last_interval.shift
    if last_interval.last.nil?
      puts "You already punched in at #{format_db_time(last_interval.first)}."
      return
    end
  end

  now = Time.now
  db.execute(<<-SQL, now.strftime(DATE_DB_FORMAT), now.strftime(TIME_DB_FORMAT))
    insert into intervals (date, start)
    values (?, ?);
  SQL

  puts "Punched in at #{now.strftime(TIME_PRINT_FORMAT)}."
end

def punch_out(db)
  no_args_command('stop', 'Stop the clock for your session')

  start_time = nil

  get_last_row(db) do |last_interval|
    db_date = last_interval.shift.to_s
    start_time = Time.strptime(last_interval.first, TIME_DB_FORMAT)
    unless last_interval.last.nil?
      puts "You're not punched in. You last punched out on " \
        "#{format_db_date(db_date)}, #{format_db_time(last_interval.last)}."
      return
    end
  end

  end_time = Time.now
  db.execute(<<-SQL, end_time.strftime(TIME_DB_FORMAT))
    update intervals
    set end = ?
    order by rowid desc
    limit 1;
  SQL

  hours_worked = get_hours_worked(start_time, end_time)
  puts "Worked from #{start_time.strftime(TIME_PRINT_FORMAT)} - " \
    "#{end_time.strftime(TIME_PRINT_FORMAT)} " \
    "(#{hours_worked.round(2)} hours)."
end

def show_intervals(db)
  # for now there's only one option
  # optparse is overkill, but more might be added in the future
  limit = nil
  parser = OptionParser.new do |opts|
    opts.banner = 'usage: turnip show [--help]'
    opts.separator ''
    opts.separator 'Show recorded intervals'

    opts.on('-n [N]', Integer, 'Limit the results to the last N days') do |n|
      if n.nil? || n <= 0
        opts.abort('error: limit must be positive integer')
      end
      limit = n
    end

    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
      exit
    end
  end
  parser.parse!
  detect_unrecognized_args(parser)

  hours_worked = 0
  print_lines = []
  line_buffer = []
  current_date = nil

  db.execute(<<-SQL) do |interval|
    select * from intervals
    order by rowid desc;
  SQL

    db_date = interval.shift
    if db_date != current_date
      unless limit.nil?
        limit -= 1
        if limit < 0
          line_buffer.first << "Worked for #{hours_worked.round(2)} hours"
          print_lines.push(*line_buffer)
          break
        end
      end

      if current_date.nil?
        current_date = db_date
        line_buffer << "# #{format_db_date(db_date.to_s)} | "
      else
        line_buffer.first << "Worked for #{hours_worked.round(2)} hours"
        print_lines.push(*line_buffer)
        hours_worked = 0
        line_buffer = []
        current_date = db_date
      end
    end

    punched_in = interval.last.nil?
    parsed_interval = interval.map do |time_str|
      time_str.nil? ? nil : Time.strptime(time_str, TIME_DB_FORMAT)
    end
    parsed_interval[1] ||= Time.now
    hours_worked += get_hours_worked(*parsed_interval)

    # reverse insertion order since the rows are in chronological order
    line_buffer.insert(1, "#{format_db_time(interval.first)} - ")
    line_buffer[1] << (punched_in ? 'now' : format_db_time(interval.last))
  end

  print_lines.each { |line| puts line }
end

def clear_intervals(db)
  no_args_command('clear', 'Clear all recorded intervals')
  db.execute 'delete from intervals;'
  puts 'Cleared all intervals'
end

# Main

if ARGV.length == 0
  show_usage
  exit
end

db = setup_db

command = ARGV.shift
case command
when 'start'    then punch_in(db)
when 'stop'     then punch_out(db)
when 'show'     then show_intervals(db)
when 'clear'    then clear_intervals(db)
else show_usage
end
