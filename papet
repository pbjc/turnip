#!/usr/bin/ruby
require 'sqlite3'

USAGE = <<EOS
usage: papet [--help] <command> [<args>]

Record when you work during the day.

Commands:
  start start the clock
  stop  stop the clock
  show  display all saved intervals
  clear delete all saved intervals
  copy  copy all saved intervals into the clipboard
EOS
DB_DIR = '.papet'
DB_FILE = 'intervals.db'
DATE_FORMAT = '%Y:%m:%d'
TIME_FORMAT = '%I:%M %p'

def show_usage
  puts USAGE
end

def setup_db
  Dir.chdir(ENV['HOME'])
  Dir.mkdir(DB_DIR) if !File::exists?(DB_DIR)
  Dir.chdir(DB_DIR)
  db_exists = File::exists?(DB_FILE)
  db = SQLite3::Database.new DB_FILE

  if db_exists
    db.execute(<<-SQL) do |last_row|
      select * from intervals
      order by rowid desc
      limit 1;
    SQL
      # TODO: handle a forgotten punch out
    end
  else
    db.execute <<-SQL
      create table intervals (
        date  date,
        start time,
        end   time
      );
    SQL
  end

  db
end

def punch_in(db)
  db.execute(<<-SQL) do |last_interval|
    select start, end from intervals
    order by rowid desc
    limit 1;
  SQL
    if last_interval[1].nil?
      puts "You already punched in at #{last_interval[0]}"
    end
  end

  time = Time.now
  db.execute <<-SQL, time.strftime(DATE_FORMAT), time.strftime(TIME_FORMAT)
    insert into intervals (date, start)
    values (?, ?);
  SQL
end

def punch_out(db)
  db.execute(<<-SQL) do |last_interval|
    select start, end from intervals
    order by rowid desc
    limit 1;
  SQL
    unless last_interval[1].nil?
      puts "You already punched out at #{last_interval[1]}"
    end
  end

  db.execute <<-SQL, Time.now.strftime(TIME_FORMAT)
    update intervals
    set end = ?
    order by rowid desc
    limit 1;
  SQL
end

def show_intervals(db)
end

def clear_intervals(db)
  db.execute 'delete from intervals;'
end

def clipboard(db, opts)
end

args = ARGV.map(&:dup)

if args.length == 0 || args[0] == '--help'
  show_usage
  Process.exit
end

db = setup_db

command = args.shift
case command
when 'start'  then punch_in(db)
when 'stop'   then punch_out(db)
when 'show'   then show_intervals(db)
when 'clear'  then clear_intervals(db)
when 'copy'   then clipboard(db, args)
else show_usage
end
